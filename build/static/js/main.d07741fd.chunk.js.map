{"version":3,"sources":["Components/utilies.js","Components/InfoBox/InfoBox.js","Components/Modal/Modal.js","Components/LineGraph.js","Components/CovidMap/CovidMap.js","Components/Table/Table.js","App.js","reportWebVitals.js","index.js"],"names":["casesTypeColors","cases","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sort","a","b","ShowDataOnMap","casesType","map","country","i","Circle","center","countryInfo","lat","long","pathOptions","color","fillColor","radius","Math","sqrt","Popup","className","style","backgroundImage","flag","numeral","format","prettyPrintStat","stat","InfoBox","title","total","active","isRed","props","Card","onClick","CardContent","Typography","Modal","isShowing","ReactDOM","createPortal","Fragment","aria-modal","aria-hidden","tabIndex","role","type","toggleElement","document","body","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","countryCode","useState","setData","showing","SetShowing","APImessage","SetAPImessage","lineUrl","useEffect","fetch","then","res","json","message","timeline","catch","error","console","log","fetchData","length","datasets","backgroundColor","borderColor","CovidMap","countries","zoom","MapContainer","scrollWheelZoom","animate","TileLayer","attribution","url","Table","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","setCenter","setZoom","mapCountries","setMapCountries","setCasesType","apiCountries","c","name","iso2","sortedData","getCountriesData","onCountryChange","event","target","FormControl","Select","variant","onChange","MenuItem","v","e","todayCases","todayRecovered","todayDeaths","charAt","toUpperCase","slice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d07741fd.chunk.js","sourcesContent":["import React from 'react';\nimport numeral from \"numeral\";\nimport { Circle, Popup } from 'react-leaflet';\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 400,\n  },\n  recovered: {\n    hex: \"greenyellow\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 400,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 600,\n  },\n};\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n  return sortedData.sort((a, b) => a.cases > b.cases ? -1 : 1);\n  // {\n  //   if(a.cases > b.cases){\n  //     return -1;\n  //   }else{\n  //     return 1;\n  //   }\n  // })\n  // return sortedData;\n}\n\nexport const ShowDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country, i) => (\n    <Circle key={i}\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      pathOptions={{\n        color: casesTypeColors[casesType].hex,\n        fillColor: casesTypeColors[casesType].hex\n      }}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  )\n  )\n\nexport const prettyPrintStat = (stat) => stat ? `+${numeral(stat).format(\"0,0a\")}` : + \"0.0\";","import React from 'react'\nimport { Card,CardContent,Typography } from '@material-ui/core';\nimport \"./InfoBox.css\"\n\nfunction InfoBox({title,cases,total,active,isRed,...props}) {\n\n  return (\n    <Card \n      className={`infoBox ${active && \"infoBox-selected\" } ${isRed && \"infoBox-red\"}`} \n      onClick={props.onClick} >\n      <CardContent>\n        <Typography className=\"infoBox_title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n          <h2 className={`infoBox_cases ${!isRed && \"infoBox_cases_green\"}`}>{cases}</h2>\n        <Typography className=\"infoBox_total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default InfoBox\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Modal = (props) => props.isShowing ? ReactDOM.createPortal(\n  <React.Fragment  >\n    <div className=\"modal-wrapper\" aria-modal aria-hidden tabIndex={-1} role=\"dialog\">\n      <div className=\"modal\">\n        <button type=\"button\" className=\"modal-close-button\"  onClick={props.toggleElement}>\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n        <div className=\"modal-header\">\n          <h3>Covid 19 Tracker Friendly Reminder</h3>\n        </div>\n        <hr/>\n        <div className=\"modal-body\">\n          {/* <h4>{props.message}</h4> */}\n          <p>This country has not update last 2 months</p>\n        </div>\n      </div>\n    </div>\n  </React.Fragment >, document.body\n) : null;\n\n\nexport default Modal;","import React, { useState, useEffect } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport Modal from \"./Modal/Modal\";\nimport \"./Modal/Modal.css\";\n\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"lll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nfunction buildChartData(data, casesType) {\n  let chartData = [];\n  let lastDataPoint;\n\n  for (let date in data[casesType]) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      }\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  };\n  return chartData;\n}\n\nfunction LineGraph({ casesType, countryCode }) {\n  const [data, setData] = useState({});\n  const [showing, SetShowing] = useState(false);\n  const [APImessage, SetAPImessage] = useState(\"\");\n\n  let lineUrl = countryCode === \"WorldWide\"\n    ? `https://disease.sh/v3/covid-19/historical/all?lastdays=120    `\n    : `https://disease.sh/v3/covid-19/historical/${countryCode}?lastdays=120`;\n\n  useEffect(() => {\n    try {\n      const fetchData = async () => {\n        await fetch(lineUrl)\n          .then(res => { return res.json() })\n          .then(data => {\n            if (!data.message) {\n              if (countryCode === \"WorldWide\") {\n                let chartData = buildChartData(data, casesType);\n                return setData(chartData);\n              } else {\n                let chartData = buildChartData(data.timeline, casesType);\n                return setData(chartData);\n              }\n            } else {\n              SetAPImessage(data.message);\n              SetShowing(true);\n            }\n\n          })\n          .catch(error => {\n            console.log(`error: Country ${countryCode} is not updated!`);\n          })\n      }\n      fetchData();\n    } catch{\n      console.log(`error: Country ${countryCode} is not updated!`);\n    }\n  }, [casesType, lineUrl, countryCode]);\n\n  function toggleElement() {\n    SetShowing(false);\n  }\n\n  return (\n    <div>\n      {data.length > 0 && (\n        <Line\n          data={\n            {\n              datasets: [\n                {\n                  data: data,\n                  backgroundColor: \"rgba(204,16,92,0.1)\",\n                  borderColor: \"#CC1034\",\n                }\n              ]\n            }\n          }\n          options={options}\n        />\n      )}\n      <Modal isShowing={showing} toggleElement={toggleElement} message={APImessage} />\n    </div>\n  )\n}\n\nexport default LineGraph\n\n\n","import React from 'react';\nimport \"./CovidMap.css\";\nimport { MapContainer, TileLayer } from 'react-leaflet';\nimport { ShowDataOnMap } from '../utilies';\n\n\nfunction CovidMap({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <MapContainer\n        key={center[0]}\n        center={[center[0], center[1]]}\n        zoom={zoom}\n        scrollWheelZoom={true}\n        animate\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {ShowDataOnMap(countries, casesType)}\n      </MapContainer>\n    </div>\n  )\n}\n\nexport default CovidMap;\n","import React from 'react';\nimport numeral from \"numeral\";\n\nfunction Table({countries}) {\n  return (\n    <table>\n      <tbody>\n        {\n          countries.map((country,i) =>(\n            <tr key={i}>\n              <td>{country.country}</td>\n              <td>\n                <strong>{numeral(country.cases).format(0,0)}</strong>\n              </td>\n            </tr>\n        ))\n        }\n      </tbody>\n    </table>\n  )\n}\n\nexport default Table\n","import React, { useState, useEffect } from 'react';\nimport { FormControl, Select, MenuItem, Card, CardContent } from '@material-ui/core';\nimport { sortData, prettyPrintStat } from \"./Components/utilies\";\nimport numeral from \"numeral\";\nimport InfoBox from \"./Components/InfoBox/InfoBox\";\nimport LineGraph from \"./Components/LineGraph\";\nimport Map from \"./Components/CovidMap/CovidMap\";\nimport Table from \"./Components/Table/Table\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./index.css\";\nimport \"./Components/Table/Table.css\";\nimport \"./Components/Modal/Modal.css\"\n\n\nconst App = () => {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"WorldWide\");\n  const [countryInfo, setCountryInfo] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [center, setCenter] = useState([40.4, -3.7]);\n  const [zoom, setZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(`cases`);\n\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((res) => res.json())\n      .then((data) => {\n        setCountryInfo(data);\n      })\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"http://disease.sh/v3/covid-19/countries\")\n        .then((res) => res.json())\n        .then((data) => {\n          const apiCountries = data.map((c) => (\n            {\n              name: c.country,\n              value: c.countryInfo.iso2\n            }\n          ))\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(apiCountries);\n          setMapCountries(data);\n        })\n    }\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n    const url = countryCode === \"WorldWide\"\n      ? `https://disease.sh/v3/covid-19/all`\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        if (countryCode === \"WorldWide\") {\n          setZoom(3);\n          setCenter([40.4, -3.7]);\n        } else {\n          setZoom(8);\n          setCenter([data.countryInfo.lat, data.countryInfo.long]);\n\n        }\n      })\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"left_app\">\n        <div className=\"app_header\">\n          <h1>Covid-19 Tracker</h1>\n          <FormControl className=\"app_dropdown\">\n            <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n              <MenuItem key={\"w\"} value=\"WorldWide\">WorldWide</MenuItem>\n              {\n                countries.map((v, i) => (\n                  <MenuItem key={i} value={v.value}>{v.name}</MenuItem>\n                ))\n              }\n\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app_stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType('cases')}\n            title=\"Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={numeral(countryInfo.cases).format(0.0)} />\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={e => setCasesType('recovered')}\n            title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={numeral(countryInfo.recovered).format(0.0)} />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={e => setCasesType('deaths')}\n            title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={numeral(countryInfo.deaths).format(0.0)} />\n        </div>\n        <div>\n          <Map\n            countries={mapCountries}\n            casesType={casesType}\n            center={center}\n            zoom={zoom}\n          />\n        </div>\n      </div>\n\n      <Card className=\"right_app\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <div className=\"table\">\n            <Table countries={tableData} />\n          </div>\n          <div className=\"newCase\">\n            <h3>{country} {casesType.charAt(0).toUpperCase() + casesType.slice(1)} Report</h3>\n            <LineGraph casesType={casesType} countryCode={country} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"leaflet/dist/leaflet.css\"\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n\n\n"],"sourceRoot":""}